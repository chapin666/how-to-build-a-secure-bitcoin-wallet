const web3 = require('web3');
const redis = require('./redis');
const queue = require('./queue');
const sync_blocks = require('./sync_blocks');

// start syncing blocks and listen for new transactions on the blockchain
async function start_syncing_blocks() {
    // start from the laste block number processed or 0
    let last_block_number = await redis.getAsync('eth:last_block');
    last_block_number = last_block_number || 0;

    // start syncing blocks
    sync_blocks(last_block_number, {
        // for every new block update the latest block value in redis
        onBlock: update_block_head,

        // for new transactions check each transaction and see if it's new
        onTransactions: async (transactions) => {
            for (let i in transactions) {
                await process_transaction(transactions[i]);
            }
        }
    });
}

// save the lastest block in redis
async function update_block_head(head) {
    return await redis.setAsync('eth:last-block', head)
}

// process a new transaction
async function process_transaction(transaction) {
    const address = transaction.to.toLowerCase();
    const amount_in_ether = web3.utils.fromWei(transaction.value);

    // check if the receiving address has been generated by our wallet
    const watched_address = await redis.existsAsync(`eth:address:public:${address}`);
    if (watched_address !== 1) {
        return false;
    }

    // check if it's a new transaction that should be taken into account
    const transaction_exists = await redis.existsAsync(`eth:address:public:${address}`);
    if (transaction_exists === 1) {
        return false;
    }

    // update the list of transactions for that address
    const data = await redis.getAsync(`eth:address:public:${address}`);
    let addr_data = JSON.parse(data);
    addr_data[transaction.hash] = {
        value: amount_in_ether,
    };

    await redis.setAsync(`eth:address:public:${address}`, JSON.stringify(addr_data));
    await redis.setAsync(`eth:transaction:${transaction.hash}`, transaction);

    // move funds to the cold wallet address
    // const cold_txid = await move_to_cold_storage(address, amount_in_ether)

    // send notification to the kafa server
    await queue.send('transaction', [{
        txid: transaction.hash,
        value: amount_in_ether,
        to: transaction.to,
        from: transaction.from,
        //cold_txid: cold_txid,
    }])

    return true;
}

module.exports = start_syncing_blocks;